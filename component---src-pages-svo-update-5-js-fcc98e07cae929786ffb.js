(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"/2wD":function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));var n=a("q1tI"),r=a.n(n),l=a("RMg3");function i(e){return r.a.createElement(l.a,{items:["Projects","Resume","Blog","About"],links:["/","/resume","/blog","/about"]})}},"2mvg":function(e,t,a){"use strict";var n=a("wx14"),r=a("zLVn"),l=a("TSYQ"),i=a.n(l),o=a("q1tI"),c=a.n(o),s=a("17x9"),d=a.n(s),h=a("vUet"),m=(d.a.string,d.a.bool,d.a.bool,d.a.bool,d.a.bool,c.a.forwardRef((function(e,t){var a=e.bsPrefix,l=e.className,o=e.fluid,s=e.rounded,d=e.roundedCircle,m=e.thumbnail,u=Object(r.a)(e,["bsPrefix","className","fluid","rounded","roundedCircle","thumbnail"]);a=Object(h.a)(a,"img");var f=i()(o&&a+"-fluid",s&&"rounded",d&&"rounded-circle",m&&a+"-thumbnail");return c.a.createElement("img",Object(n.a)({ref:t},u,{className:i()(l,f)}))})));m.displayName="Image",m.defaultProps={fluid:!1,rounded:!1,roundedCircle:!1,thumbnail:!1},t.a=m},"6xyR":function(e,t,a){"use strict";var n=a("wx14"),r=a("zLVn"),l=a("TSYQ"),i=a.n(l),o=a("q1tI"),c=a.n(o),s=a("vUet"),d=a("YdCC"),h=function(e){return c.a.forwardRef((function(t,a){return c.a.createElement("div",Object(n.a)({},t,{ref:a,className:i()(t.className,e)}))}))},m=a("Wzyw"),u=c.a.forwardRef((function(e,t){var a=e.bsPrefix,l=e.className,o=e.variant,d=e.as,h=void 0===d?"img":d,m=Object(r.a)(e,["bsPrefix","className","variant","as"]),u=Object(s.a)(a,"card-img");return c.a.createElement(h,Object(n.a)({ref:t,className:i()(o?u+"-"+o:u,l)},m))}));u.displayName="CardImg",u.defaultProps={variant:null};var f=u,b=h("h5"),p=h("h6"),x=Object(d.a)("card-body"),g=Object(d.a)("card-title",{Component:b}),v=Object(d.a)("card-subtitle",{Component:p}),y=Object(d.a)("card-link",{Component:"a"}),w=Object(d.a)("card-text",{Component:"p"}),E=Object(d.a)("card-header"),T=Object(d.a)("card-footer"),N=Object(d.a)("card-img-overlay"),k=c.a.forwardRef((function(e,t){var a=e.bsPrefix,l=e.className,d=e.bg,h=e.text,u=e.border,f=e.body,b=e.children,p=e.as,g=void 0===p?"div":p,v=Object(r.a)(e,["bsPrefix","className","bg","text","border","body","children","as"]),y=Object(s.a)(a,"card"),w=Object(o.useMemo)((function(){return{cardHeaderBsPrefix:y+"-header"}}),[y]);return c.a.createElement(m.a.Provider,{value:w},c.a.createElement(g,Object(n.a)({ref:t},v,{className:i()(l,y,d&&"bg-"+d,h&&"text-"+h,u&&"border-"+u)}),f?c.a.createElement(x,null,b):b))}));k.displayName="Card",k.defaultProps={body:!1},k.Img=f,k.Title=g,k.Subtitle=v,k.Body=x,k.Link=y,k.Text=w,k.Header=E,k.Footer=T,k.ImgOverlay=N;t.a=k},K0tR:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return s}));var n=a("q1tI"),r=a.n(n),l=a("7vrA"),i=a("6xyR"),o=a("/2wD"),c=a("2mvg");function s(){return r.a.createElement("div",null,r.a.createElement("link",{rel:"stylesheet",href:"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css",integrity:"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk",crossorigin:"anonymous"}),r.a.createElement(o.a,null),r.a.createElement(l.a,{fluid:!0},r.a.createElement("br",null),r.a.createElement(i.a,{style:{maxWidth:"1200px"}},r.a.createElement(i.a.Header,{style:{background:"#EEEEEE"}},"7/14/2022"),r.a.createElement(i.a.Body,null,r.a.createElement(i.a.Title,null,r.a.createElement("h2",null,"SVO Ray Tracer Update #5 - Improving Traversal to Remove Artifacts")),r.a.createElement("a",{href:"https://github.com/Onlinerocker/SVO"},"Project's GitHub Repo"),r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(i.a.Title,null,"The Old GetNextVoxelFunction"),"The outline of my traversal algorithm was taken from an NVIDIA paper (described in previous updates). This algorithm, however, was in pseudo-code and left many of the specific details as a black box. Specifically, the function that determined the next voxel to move to based on the ray’s exit point was something I wrote myself without guidance. The idea of my implementation was to determine which side of the voxel the ray exited on. This would imply the next voxel the ray was entering. I don’t even consider the direction of the ray, just the normal of the face the ray exits on. This works perfectly fine in all cases EXCEPT corners and edges. The calculated normal on corners and edges actually implies the ray should travel to the diagonal voxel, which isn’t desired. To solve this, I let the algorithm arbitrarily pick which direction to take. This meant that sometimes it would pick a direction that didn’t make sense with direction of a ray. Observe the following case:",r.a.createElement("br",null),r.a.createElement(c.a,{src:"../amazing_corner_visual.png",style:{width:"40%",maxWidth:"600px",paddingRight:"19px"}}),r.a.createElement("br",null),r.a.createElement("br",null),"As you can see, (assuming left hand coordinate system) the algorithm may choose -Y instead of +X which doesn’t make sense when you consider the ray’s actual direction. To solve this, I added a check that made sure the face it chose coincided with the ray’s direction.",r.a.createElement("br",null),r.a.createElement("br",null),"Despite all my efforts, though, I was still seeing artifacts occasionally. The artifacts rendered when the traversal algorithm determined there was no valid voxel to move and it had not exited the root node. They were infrequent enough to not disturb the final image and making them render as black made them even less discernable. I don’t think anybody ever noticed them. They definitely bugged me though, and it was time to get rid of them!",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(c.a,{src:"../traversal_artifacts.PNG",style:{width:"50%",maxWidth:"900px",paddingRight:"19px"}}),r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(c.a,{src:"../trav_artifacts1.PNG",style:{width:"50%",maxWidth:"900px",paddingRight:"19px"}}),r.a.createElement("br",null),r.a.createElement("i",null,"Traversal artifacts (rendered as red)"),r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(i.a.Title,null,"The New GetNextVoxel Function"),"I was never super happy with my implementation of GetNextVoxel. It was hacky and required calculating a normal whenever you wanted you wanted to get the next voxel. I decided to read up on common voxel traversals to see how they determined the next voxel to move to. The paper A Fast Voxel Traversal Algorithm for Ray Tracing  (Amanatides and Woo) proved the most useful for me. The way they decide which voxel to step to next is actually determined in the ray trace function itself. Recall that we intersect the max and min planes for a given voxel on the X, Y, and Z axis when in the ray trace box function. These minimum of these max plane intersections actually tells us which face of the voxel the ray exits on. This is intuitive if you see an image:",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(c.a,{src:"../plane_intersections.png",style:{width:"30%",maxWidth:"500px",paddingRight:"19px"}}),r.a.createElement("br",null),r.a.createElement("i",null,"2D demonstration of min/max plane intersections"),r.a.createElement("br",null),r.a.createElement("br",null),"As you can see the ray hits the max X plane before it hits the max Y plane. Thus, we know the ray exits the voxel on one of the X planes. Determining which one is implied by the direction of the ray on that given dimension. Since the ray has a negative X direction, it can be deduced that the ray exits on the positive X face.",r.a.createElement("br",null),r.a.createElement("br",null),"After implementing this new GetNextVoxel function the artifacts were reduced slightly, but were still present.",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(c.a,{src:"../before_trav_fix.PNG",style:{width:"50%",maxWidth:"900px",paddingRight:"19px"}}),r.a.createElement("br",null),r.a.createElement("i",null,"Artifacts after new GetNextVoxel function was implemented"),r.a.createElement("br",null),r.a.createElement("br",null),"On corners/edges, however, two planes were actually tied for the minimum T value. I accounted for this by allowing the traversal to choose the other valid plane if it meant the ray would traverse into a voxel rather than exiting the root. With this change I was now back to the previous number of artifacts! It was evident these artifacts were occurring from something other than my GetNextVoxel function. This was still a win, however, because the new GetVoxelFunction reduced complexity and required less instructions overall.",r.a.createElement("br",null),r.a.createElement("br",null),"While exploring the traversal code again I noticed when popping up the stack of root voxels (upon exiting a child root) I wasn’t recalculating the exit plane. This was clearly going to cause issues because the exit plane of a child voxel and root voxel could differ greatly. After a few lines of code to recalculate this, the artifacts were finally gone.",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(c.a,{src:"../after_traav_fix.PNG",style:{width:"50%",maxWidth:"900px",paddingRight:"19px"}}),r.a.createElement("br",null),r.a.createElement("i",null,"After recalculating the exit plane upon popping up the root voxel stack (no artifacts!)"),r.a.createElement("br",null),r.a.createElement("br",null)))),r.a.createElement("br",null))}}}]);
//# sourceMappingURL=component---src-pages-svo-update-5-js-fcc98e07cae929786ffb.js.map