{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Image.js","webpack:///./src/pages/tree_gen.js"],"names":["Image","string","bool","forwardRef","_ref","ref","bsPrefix","className","fluid","rounded","roundedCircle","thumbnail","props","classes","createElement","displayName","defaultProps","TreeGenerator","rel","href","integrity","crossorigin","items","links","projects","src","style","width","maxWidth","paddingRight"],"mappings":"8FAAA,uGAsCIA,GA5BQ,IAAUC,OAKb,IAAUC,KAKR,IAAUA,KAKJ,IAAUA,KAKd,IAAUA,KAQX,IAAMC,YAAW,SAAUC,EAAMC,GAC3C,IAAIC,EAAWF,EAAKE,SAChBC,EAAYH,EAAKG,UACjBC,EAAQJ,EAAKI,MACbC,EAAUL,EAAKK,QACfC,EAAgBN,EAAKM,cACrBC,EAAYP,EAAKO,UACjBC,EAAQ,YAA8BR,EAAM,CAAC,WAAY,YAAa,QAAS,UAAW,gBAAiB,cAE/GE,EAAW,YAAmBA,EAAU,OACxC,IAAIO,EAAU,IAAWL,GAASF,EAAW,SAAUG,GAAW,UAAWC,GAAiB,iBAAkBC,GAAaL,EAAW,cACxI,OAAoB,IAAMQ,cAAc,MAAO,YAAS,CAEtDT,IAAKA,GACJO,EAAO,CACRL,UAAW,IAAWA,EAAWM,UAGrCb,EAAMe,YAAc,QACpBf,EAAMgB,aAzBa,CACjBR,OAAO,EACPC,SAAS,EACTC,eAAe,EACfC,WAAW,GAsBE,O,kCC1Df,4GAKe,SAASM,IACtB,OACE,6BACI,0BACIC,IAAI,aACJC,KAAK,wEACLC,UAAU,0EACVC,YAAY,cAGhB,kBAAC,IAAD,CAAQC,MAAO,CAAC,OAAQ,SAAU,YAAaC,MAAO,CAAC,IAAK,UAAW,aAAcC,SAAU,CAAC,cAAe,UAAW,cAAe,WAAY,mBAErJ,kBAAC,IAAD,CAAWhB,OAAK,GACZ,6BACA,iEACA,kBAAC,IAAD,CAAOiB,IAAI,wFAAwFC,MAAO,CAACC,MAAO,MAAOC,SAAU,SAAUC,aAAc,UAE3J,kLAIA,0CACA,oRAKA,wCACA,2BACA,8CADA,6CACgE,6BAChE,8CAFA,oDAEuE,6BACvE,yCAHA,qEAGmF,6BACnF,oCAJA,4DAIqE,6BACrE,2CALA,qGAKqH,6BACrH,sCANA,0DAMqE,6BACrE,sCAPA,0DAOqE,6BACrE,yCARA,4BAQ0C","file":"component---src-pages-tree-gen-js-11a88ba2f32e170b752f.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useBootstrapPrefix } from './ThemeProvider';\nexport var propTypes = {\n  /**\n   * @default 'img'\n   */\n  bsPrefix: PropTypes.string,\n\n  /**\n   * Sets image as fluid image.\n   */\n  fluid: PropTypes.bool,\n\n  /**\n   * Sets image shape as rounded.\n   */\n  rounded: PropTypes.bool,\n\n  /**\n   * Sets image shape as circle.\n   */\n  roundedCircle: PropTypes.bool,\n\n  /**\n   * Sets image shape as thumbnail.\n   */\n  thumbnail: PropTypes.bool\n};\nvar defaultProps = {\n  fluid: false,\n  rounded: false,\n  roundedCircle: false,\n  thumbnail: false\n};\nvar Image = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      fluid = _ref.fluid,\n      rounded = _ref.rounded,\n      roundedCircle = _ref.roundedCircle,\n      thumbnail = _ref.thumbnail,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"fluid\", \"rounded\", \"roundedCircle\", \"thumbnail\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'img');\n  var classes = classNames(fluid && bsPrefix + \"-fluid\", rounded && \"rounded\", roundedCircle && \"rounded-circle\", thumbnail && bsPrefix + \"-thumbnail\");\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    // eslint-disable-line jsx-a11y/alt-text\n    ref: ref\n  }, props, {\n    className: classNames(className, classes)\n  }));\n});\nImage.displayName = 'Image';\nImage.defaultProps = defaultProps;\nexport default Image;","import React from \"react\"\r\nimport Navbar from \"../components/navbar\"\r\nimport Container from 'react-bootstrap/Container'\r\nimport Image from \"react-bootstrap/Image\"\r\n\r\nexport default function TreeGenerator() {\r\n  return (\r\n    <div>\r\n        <link\r\n            rel=\"stylesheet\"\r\n            href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\r\n            integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\r\n            crossorigin=\"anonymous\"\r\n        />\r\n\r\n        <Navbar items={['Blog', 'Resume', 'Projects']} links={['/', '/resume', '/projects']} projects={['Ultra Stack', 'Shaders', 'Puzzle Game', 'IK Demos', 'Spline Editor']}/>    \r\n        \r\n        <Container fluid>\r\n            <br/>\r\n            <h1>Fractal Tree Generator User Guide</h1>\r\n            <Image src=\"https://raw.githubusercontent.com/Onlinerocker/FractalTreeGenerator/master/screen.png\" style={{width: \"60%\", maxWidth: \"1000px\", paddingRight: \"19px\"}}/>   \r\n\r\n            <p>\r\n                A fractal tree generator I created using C++, OpenGL, and DearImGui. A user interface allows you to specify iterations, color, and rotation angles.\r\n            </p>\r\n\r\n            <h2>How to Use</h2>\r\n            <p>\r\n                Input your desired parameters into the 'Settings' window. After you're satisfied with the settings YOU MUST click the recompute button\r\n                - this will generate a new tree. 8+ iterations may take some time, so be patient (the app is single-threaded).\r\n            </p>\r\n\r\n            <h2>Settings</h2>\r\n            <p>\r\n            <i>Camera Position</i>: The XYZ viewing position of the camera. <br/>\r\n            <i>Object Rotation</i>: The rotation of the tree around the 'UP' axis. <br/>\r\n            <i>Iterations</i>: Number of iterations to run when generating the tree's branches <br/>\r\n            <i>Faces</i>: The number of quads to use when generating each branch <br/>\r\n            <i>Radius Ratio</i>: The radius multiplier for the next iteration of branches. Equivalent to (Radius_N+1 / Radius_N) <br/>\r\n            <i>X Angle</i>: Degree to add to the branch X rotation each iteration<br/>\r\n            <i>Y Angle</i>: Degree to add to the branch Y rotation each iteration<br/>\r\n            <i>Leaf Color</i>: The color of the leaves<br/>\r\n            </p>\r\n\r\n        </Container>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}