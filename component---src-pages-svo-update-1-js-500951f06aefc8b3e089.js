(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"/2wD":function(e,t,a){"use strict";a.d(t,"a",(function(){return l}));var n=a("q1tI"),r=a.n(n),i=a("RMg3");function l(e){return r.a.createElement(i.a,{items:["Projects","Resume","Blog","About"],links:["/","/resume","/blog","/about"]})}},"2mvg":function(e,t,a){"use strict";var n=a("wx14"),r=a("zLVn"),i=a("TSYQ"),l=a.n(i),o=a("q1tI"),s=a.n(o),c=a("17x9"),d=a.n(c),m=a("vUet"),u=(d.a.string,d.a.bool,d.a.bool,d.a.bool,d.a.bool,s.a.forwardRef((function(e,t){var a=e.bsPrefix,i=e.className,o=e.fluid,c=e.rounded,d=e.roundedCircle,u=e.thumbnail,h=Object(r.a)(e,["bsPrefix","className","fluid","rounded","roundedCircle","thumbnail"]);a=Object(m.a)(a,"img");var b=l()(o&&a+"-fluid",c&&"rounded",d&&"rounded-circle",u&&a+"-thumbnail");return s.a.createElement("img",Object(n.a)({ref:t},h,{className:l()(i,b)}))})));u.displayName="Image",u.defaultProps={fluid:!1,rounded:!1,roundedCircle:!1,thumbnail:!1},t.a=u},"6xyR":function(e,t,a){"use strict";var n=a("wx14"),r=a("zLVn"),i=a("TSYQ"),l=a.n(i),o=a("q1tI"),s=a.n(o),c=a("vUet"),d=a("YdCC"),m=function(e){return s.a.forwardRef((function(t,a){return s.a.createElement("div",Object(n.a)({},t,{ref:a,className:l()(t.className,e)}))}))},u=a("Wzyw"),h=s.a.forwardRef((function(e,t){var a=e.bsPrefix,i=e.className,o=e.variant,d=e.as,m=void 0===d?"img":d,u=Object(r.a)(e,["bsPrefix","className","variant","as"]),h=Object(c.a)(a,"card-img");return s.a.createElement(m,Object(n.a)({ref:t,className:l()(o?h+"-"+o:h,i)},u))}));h.displayName="CardImg",h.defaultProps={variant:null};var b=h,p=m("h5"),f=m("h6"),g=Object(d.a)("card-body"),y=Object(d.a)("card-title",{Component:p}),E=Object(d.a)("card-subtitle",{Component:f}),w=Object(d.a)("card-link",{Component:"a"}),x=Object(d.a)("card-text",{Component:"p"}),v=Object(d.a)("card-header"),I=Object(d.a)("card-footer"),O=Object(d.a)("card-img-overlay"),j=s.a.forwardRef((function(e,t){var a=e.bsPrefix,i=e.className,d=e.bg,m=e.text,h=e.border,b=e.body,p=e.children,f=e.as,y=void 0===f?"div":f,E=Object(r.a)(e,["bsPrefix","className","bg","text","border","body","children","as"]),w=Object(c.a)(a,"card"),x=Object(o.useMemo)((function(){return{cardHeaderBsPrefix:w+"-header"}}),[w]);return s.a.createElement(u.a.Provider,{value:x},s.a.createElement(y,Object(n.a)({ref:t},E,{className:l()(i,w,d&&"bg-"+d,m&&"text-"+m,h&&"border-"+h)}),b?s.a.createElement(g,null,p):p))}));j.displayName="Card",j.defaultProps={body:!1},j.Img=b,j.Title=y,j.Subtitle=E,j.Body=g,j.Link=w,j.Text=x,j.Header=v,j.Footer=I,j.ImgOverlay=O;t.a=j},"g9w/":function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return c}));var n=a("q1tI"),r=a.n(n),i=a("7vrA"),l=a("6xyR"),o=a("/2wD"),s=a("2mvg");function c(){return r.a.createElement("div",null,r.a.createElement("link",{rel:"stylesheet",href:"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css",integrity:"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk",crossorigin:"anonymous"}),r.a.createElement(o.a,null),r.a.createElement(i.a,{fluid:!0},r.a.createElement("br",null),r.a.createElement(l.a,{style:{maxWidth:"1200px"}},r.a.createElement(l.a.Header,null,"6/3/2022"),r.a.createElement(l.a.Body,null,r.a.createElement(l.a.Title,null,r.a.createElement("h2",null,"SVO Ray Tracer Update #1")),r.a.createElement("br",null),r.a.createElement("i",null,"Screenshot of the application thus far"),r.a.createElement("br",null),r.a.createElement(s.a,{src:"../svo_screenshot_update1.png",style:{width:"80%",maxWidth:"1000px",paddingRight:"19px"}}),r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(l.a.Title,null,"Dependencies"),"I decided to use SDL2 for window management and input. This means I don’t have to interface with windows APIs and basically skip right to rendering things.",r.a.createElement("br",null),r.a.createElement("br",null),"For the rendering backend I decided to go with DX11. I considered using OpenGL, but DX is the native windows API, so it seemed like the natural choice. DX12 was also a possibility, however the bulk of my code is happening inside a pixel shader running on a full-screen quad. This is something I could easily achieve using DX11 and the increased flexibility of DX12 would serve little value (it would likely just amount to more boiler plate).",r.a.createElement("br",null),r.a.createElement("br",null),"I’m using GLM for my math library. It offers lots of functionality and I’m already familiar with it, so it’s the obvious choice.",r.a.createElement("br",null),r.a.createElement("br",null),"Lastly, I’m using Dear ImGui for debug windows. The library has backends for a variety of project stacks, including ones using DX11 and SDL2 together. Additionally, Dear ImGui is an immediate mode user interface. This means the interface is re-rendered every frame even if nothing has changed. While this may be slower than the typical retained mode UI, it’s intuitive to work with and easy to integrate in the context of a real time graphics application. Another simplifying consequence of this is it doesn’t require any asynchronous calls or decoupling input/rendering. Input detection is done inside the same function that initiates rendering since both happen every frame. The function returns true if input has caused a state change to the corresponding UI element and false otherwise.",r.a.createElement("br",null),r.a.createElement("br",null),"After adding the DX11/SDL2 Dear ImGui backend to my project, I was easily able to bootstrap the library by referencing an example project on the library’s GitHub page.",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(l.a.Title,null,"Getting Started"),"After integrating my dependencies, I was ready to start writing code. I wrote typical DX11 boiler plate code to create my swap chain, device, and device context. After this, I created a vertex buffer to hold six vertices corresponding to a full screen quad (three vertices for each triangle in the quad).",r.a.createElement("br",null),r.a.createElement("br",null),"A very (very) basic vertex shader was needed to transfer the vertex positions to the pixel shader. It doesn’t transform the vertex position at all, it just passes it along to the pixel shader.",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(l.a.Text,{style:{fontFamily:"monospace",color:"white",background:"#333333",padding:"10px"}},"struct VertOut",r.a.createElement("br",null),"{",r.a.createElement("br",null),"    ","float4 pos : SV_POSITION;",r.a.createElement("br",null),"}",r.a.createElement("br",null),r.a.createElement("br",null),"VertOut vertexMain(float4 position : POSITION)",r.a.createElement("br",null),"{",r.a.createElement("br",null),"    ","VertOut o;",r.a.createElement("br",null),"    ","o.pos = position;",r.a.createElement("br",null),"    ","return o;",r.a.createElement("br",null),"}"),r.a.createElement("br",null),"Additionally, I also needed a pixel shader. I started by just outputting red to the screen. This allowed me to debug my full screen quad and vertex buffer quickly. Once the screen was completely red, I moved on to writing the pixel shader.",r.a.createElement("br",null),r.a.createElement("br",null),"All of the voxel ray tracing and rendering is going to be done inside this pixel shader. Debugging and positioning the camera in GPU applications can be tricky (and annoying) so I wanted to start with something I was familiar with: a sphere ray marcher. I’ve written tens of ray marchers, so I was able to get this up and running without a head ache. This allowed me to ensure my camera and object positions were correct.",r.a.createElement("br",null),r.a.createElement("br",null),"After completing this, I moved on to writing the box ray tracer.",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(l.a.Title,null,"Ray Tracing a Box"),"Scratchapixel has an excellent post on ray-box intersection that I followed in order to implement box ray tracing. That post can be found",r.a.createElement("i",null,r.a.createElement("a",{href:"https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection"}," here.")),r.a.createElement("br",null),r.a.createElement("br",null),"The basic idea is to find the intersection points of the ray and the planes corresponding to the box’s minimum and maximum extents. You can then determine if these points are on the box by analyzing the order in which they hit. For example, as displayed by the image below, if you hit the minimum X after you hit the maximum Y, you must have missed the box.",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(s.a,{src:"../sap_miss_rb.png",style:{width:"25%",maxWidth:"666px",paddingRight:"19px"}}),r.a.createElement("br",null),r.a.createElement("br",null),"One unintuitive bit of this is that it swaps the minimum and maximum T values depending on which occurs first. I think about this as adjusting for the view of the camera. For example, if we're located on the +X side of the cube and looking down -X, the minimum T will actually corresponding to the +X plane, not the -X plane.",r.a.createElement("br",null),r.a.createElement("br",null),"Most of my code is the same as ",r.a.createElement("i",null,"Scratchapixel’s"),", but I did add some additional logic to return the color corresponding to the intersected plane. Red for either X plane, green for either Y plane, and blue for either Z plane. Grey is returned if the ray misses the box.",r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement(l.a.Title,null,"Camera Controls and Debug Stats"),"Since I already had camera position programmed into the shader, I decided to create a constant buffer I could pass to the pixel shader containing the camera position. This allows me to drive the camera position from the CPU. Using Dear ImGui, I created a debug window with sliders to modify the camera X, Y, and Z positions.",r.a.createElement("br",null),r.a.createElement("br",null),"Lastly, I added FPS and frame time information to the debug window. I use the chrono library to get time stamps before and after the frame, then subtract these to get frame time in milliseconds. This time is then used to calculate the FPS.",r.a.createElement("br",null),r.a.createElement("br",null)))),r.a.createElement("br",null))}}}]);
//# sourceMappingURL=component---src-pages-svo-update-1-js-500951f06aefc8b3e089.js.map