{"version":3,"sources":["webpack:///./src/components/real_navbar.js","webpack:///./src/pages/svo_update3.js","webpack:///./node_modules/react-bootstrap/esm/Image.js","webpack:///./node_modules/react-bootstrap/esm/divWithClassName.js","webpack:///./node_modules/react-bootstrap/esm/CardImg.js","webpack:///./node_modules/react-bootstrap/esm/Card.js"],"names":["RealNavbar","props","items","links","SVO_Update1","rel","href","integrity","crossorigin","fluid","style","maxWidth","Header","background","Body","Title","src","width","paddingRight","height","title","frameborder","allow","allowfullscreen","Image","string","bool","forwardRef","_ref","ref","bsPrefix","className","rounded","roundedCircle","thumbnail","classes","createElement","displayName","defaultProps","p","CardImg","variant","_ref$as","as","Component","prefix","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardHeader","CardFooter","CardImgOverlay","Card","bg","text","border","body","children","cardContext","cardHeaderBsPrefix","CardContext","Provider","value","Img","Subtitle","Link","Text","Footer","ImgOverlay"],"mappings":"8FAAA,uEAGe,SAASA,EAAWC,GAC/B,OACI,kBAAC,IAAD,CAAQC,MAAO,CAAC,WAAY,SAAU,OAAQ,SAAUC,MAAO,CAAC,IAAK,UAAW,QAAS,c,oCCLjG,wHAOe,SAASC,IAEpB,OACA,6BACE,0BACEC,IAAI,aACJC,KAAK,wEACLC,UAAU,0EACVC,YAAY,cAGZ,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAWC,OAAK,GAChB,6BACA,kBAAC,IAAD,CAAMC,MAAO,CAACC,SAAU,WAEpB,kBAAC,IAAKC,OAAN,CAAaF,MAAO,CAACG,WAAY,YAAjC,YACA,kBAAC,IAAKC,KAAN,KACA,kBAAC,IAAKC,MAAN,KAAY,yDAEZ,uBAAGT,KAAK,uCAAR,yBAEA,6BAAK,6BAEL,kBAAC,IAAKS,MAAN,iCAPA,+cAUA,6BAAK,6BAVL,sTAYA,6BAAK,6BAZL,qVAcA,6BAAK,6BACL,qGAEA,6BAAK,6BACL,kBAAC,IAAKA,MAAN,yCAlBA,oMAqBA,6BAAK,6BArBL,kEAuBA,6BAvBA,iGAyBA,6BAzBA,wEA2BA,6BA3BA,uKA6BA,6BAAK,6BA7BL,2FA+BA,6BAAK,6BAEL,uFAA+D,6BAC/D,kBAAC,IAAD,CAAOC,IAAI,uBAAuBN,MAAO,CAACO,MAAO,MAAON,SAAU,QAASO,aAAc,UACzF,6BAEA,6BAAK,6BACL,kBAAC,IAAKH,MAAN,+BAtCA,6xBAwCA,6BAAK,6BAEL,kBAAC,IAAKA,MAAN,4CA1CA,6KA4CA,6BAAK,6BAEL,gGAAwE,6BACxE,kBAAC,IAAD,CAAOC,IAAI,wBAAwBN,MAAO,CAACO,MAAO,MAAON,SAAU,QAASO,aAAc,UAC1F,6BAAK,6BAhDL,2qBAmDA,6BAAK,6BAnDL,2OAqDA,6BAAK,6BAEL,wHAAgG,6BAChG,kBAAC,IAAD,CAAOF,IAAI,kCAAkCN,MAAO,CAACO,MAAO,MAAON,SAAU,QAASO,aAAc,UACpG,6BAAK,6BAGL,kBAAC,IAAKH,MAAN,aA5DA,gLA8DA,6BAAK,6BACL,4BAAQE,MAAM,MAAME,OAAO,MAAMH,IAAI,4CAA4CI,MAAM,uBAAuBC,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,IAC9O,6BAAK,6BAEL,kBAAC,IAAKR,MAAN,qBAlEA,uNAoEA,6BAAK,6BApEL,oQA6EN,gC,oCCrGN,uGAsCIS,GA5BQ,IAAUC,OAKb,IAAUC,KAKR,IAAUA,KAKJ,IAAUA,KAKd,IAAUA,KAQX,IAAMC,YAAW,SAAUC,EAAMC,GAC3C,IAAIC,EAAWF,EAAKE,SAChBC,EAAYH,EAAKG,UACjBtB,EAAQmB,EAAKnB,MACbuB,EAAUJ,EAAKI,QACfC,EAAgBL,EAAKK,cACrBC,EAAYN,EAAKM,UACjBjC,EAAQ,YAA8B2B,EAAM,CAAC,WAAY,YAAa,QAAS,UAAW,gBAAiB,cAE/GE,EAAW,YAAmBA,EAAU,OACxC,IAAIK,EAAU,IAAW1B,GAASqB,EAAW,SAAUE,GAAW,UAAWC,GAAiB,iBAAkBC,GAAaJ,EAAW,cACxI,OAAoB,IAAMM,cAAc,MAAO,YAAS,CAEtDP,IAAKA,GACJ5B,EAAO,CACR8B,UAAW,IAAWA,EAAWI,UAGrCX,EAAMa,YAAc,QACpBb,EAAMc,aAzBa,CACjB7B,OAAO,EACPuB,SAAS,EACTC,eAAe,EACfC,WAAW,GAsBE,O,kICvDC,cACd,OAAO,IAAMP,YAAW,SAAUY,EAAGV,GACnC,OAAoB,IAAMO,cAAc,MAAO,YAAS,GAAIG,EAAG,CAC7DV,IAAKA,EACLE,UAAW,IAAWQ,EAAER,UAAWA,U,YCCrCS,EAAU,IAAMb,YACpB,SAAUC,EAAMC,GACd,IAAIC,EAAWF,EAAKE,SAChBC,EAAYH,EAAKG,UACjBU,EAAUb,EAAKa,QACfC,EAAUd,EAAKe,GACfC,OAAwB,IAAZF,EAAqB,MAAQA,EACzCzC,EAAQ,YAA8B2B,EAAM,CAAC,WAAY,YAAa,UAAW,OAEjFiB,EAAS,YAAmBf,EAAU,YAC1C,OAAoB,IAAMM,cAAcQ,EAAW,YAAS,CAC1Df,IAAKA,EACLE,UAAW,IAAWU,EAAUI,EAAS,IAAMJ,EAAUI,EAAQd,IAChE9B,OAELuC,EAAQH,YAAc,UACtBG,EAAQF,aAnBW,CACjBG,QAAS,MAmBI,QChBXK,EAAgBC,EAAiB,MACjCC,EAAgBD,EAAiB,MACjCE,EAAW,OAAAC,EAAA,GAAmB,aAC9BC,EAAY,OAAAD,EAAA,GAAmB,aAAc,CAC/CN,UAAWE,IAETM,EAAe,OAAAF,EAAA,GAAmB,gBAAiB,CACrDN,UAAWI,IAETK,EAAW,OAAAH,EAAA,GAAmB,YAAa,CAC7CN,UAAW,MAETU,EAAW,OAAAJ,EAAA,GAAmB,YAAa,CAC7CN,UAAW,MAETW,EAAa,OAAAL,EAAA,GAAmB,eAChCM,EAAa,OAAAN,EAAA,GAAmB,eAChCO,EAAiB,OAAAP,EAAA,GAAmB,oBAIpCQ,EAAO,IAAM/B,YAAW,SAAUC,EAAMC,GAC1C,IAAIC,EAAWF,EAAKE,SAChBC,EAAYH,EAAKG,UACjB4B,EAAK/B,EAAK+B,GACVC,EAAOhC,EAAKgC,KACZC,EAASjC,EAAKiC,OACdC,EAAOlC,EAAKkC,KACZC,EAAWnC,EAAKmC,SAChBrB,EAAUd,EAAKe,GACfC,OAAwB,IAAZF,EAAqB,MAAQA,EACzCzC,EAAQ,YAA8B2B,EAAM,CAAC,WAAY,YAAa,KAAM,OAAQ,SAAU,OAAQ,WAAY,OAElHiB,EAAS,YAAmBf,EAAU,QACtCkC,EAAc,mBAAQ,WACxB,MAAO,CACLC,mBAAoBpB,EAAS,aAE9B,CAACA,IACJ,OAAoB,IAAMT,cAAc8B,EAAA,EAAYC,SAAU,CAC5DC,MAAOJ,GACO,IAAM5B,cAAcQ,EAAW,YAAS,CACtDf,IAAKA,GACJ5B,EAAO,CACR8B,UAAW,IAAWA,EAAWc,EAAQc,GAAM,MAAQA,EAAIC,GAAQ,QAAUA,EAAMC,GAAU,UAAYA,KACvGC,EAGJ,IAAM1B,cAAca,EAAU,KAAMc,GAAYA,OAElDL,EAAKrB,YAAc,OACnBqB,EAAKpB,aAjCc,CACjBwB,MAAM,GAiCRJ,EAAKW,IAAM,EACXX,EAAK3C,MAAQoC,EACbO,EAAKY,SAAWlB,EAChBM,EAAK5C,KAAOmC,EACZS,EAAKa,KAAOlB,EACZK,EAAKc,KAAOlB,EACZI,EAAK9C,OAAS2C,EACdG,EAAKe,OAASjB,EACdE,EAAKgB,WAAajB,EACH","file":"component---src-pages-svo-update-3-js-2d2301d86d0526ca25d3.js","sourcesContent":["import React from \"react\"\r\nimport Navbar from \"../components/navbar\"\r\n\r\nexport default function RealNavbar(props){\r\n    return (    \r\n        <Navbar items={['Projects', 'Resume', 'Blog', 'About']} links={['/', '/resume', '/blog', '/about']} />\r\n    )\r\n}","import React from \"react\"\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Card from \"react-bootstrap/Card\"\r\nimport RealNavbar from \"../components/real_navbar\"\r\nimport Image from \"react-bootstrap/Image\"\r\n\r\nexport default function SVO_Update1() {\r\n    \r\n    return (\r\n    <div>\r\n      <link\r\n        rel=\"stylesheet\"\r\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\r\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\r\n        crossorigin=\"anonymous\"\r\n      />\r\n\r\n        <RealNavbar/>  \r\n        <Container fluid>\r\n        <br/>\r\n        <Card style={{maxWidth: '1200px'}}>\r\n            \r\n            <Card.Header style={{background: \"#EEEEEE\"}}>7/6/2022</Card.Header>    \r\n            <Card.Body>\r\n            <Card.Title><h2>SVO Ray Tracer Update #3</h2></Card.Title>\r\n\r\n            <a href=\"https://github.com/Onlinerocker/SVO\">Project's GitHub Repo</a>\r\n\r\n            <br/><br/>\r\n\r\n            <Card.Title>Improved Camera Controls</Card.Title>\r\n            \r\n            In order to more thoroughly debug my traversal algorithm, I needed to improve my camera controls. Three sliders for XYZ coordinates was good enough to get a prototype up and running, but it was becoming increasingly important to view the voxels at a variety of angles. My goal was to program camera controls similar to those found in Unreal Engine’s editor. The mouse would rotate the camera, while WASD would translate you along your forward and right vector.\r\n            <br/><br/>\r\n            This was relatively quick to implement since SDL already has functionality to grab the mouse X and Y deltas each frame. All I needed to do was feed these into a function that rotates the forward and right vectors. After that, I could calculate the up vector by taking the cross product of forward and right.\r\n            <br/><br/>\r\n            Additionally, I added the forward, up, and right vectors to a constant buffer for my ray tracer to use when calculating the ray direction for a given pixel. The X/Y ray direction is calculated by multiplying the pixel position (normalized to [-1, 1]) by the right and up vectors respectively. The final direction calculation comes out as:\r\n            <br/><br/>\r\n            <b>float3 direction = normalize(Pixel_X * RIGHT + Pixel_Y * UP + FORWARD)</b>\r\n\r\n            <br/><br/>\r\n            <Card.Title>Traversal Algorithm Improvements</Card.Title>\r\n\r\n            The new traversal algorithm now traverses along the ray, moving up and down the octree to locate the appropriate leaf node to render. There are four possibilities when traversing along the ray:\r\n            <br/><br/>\r\n            ⦁\tEntering an empty voxel: Move along the ray to the next voxel\r\n            <br/>\r\n            ⦁\tEntering a voxel that is non-empty and non-leaf: Move down the octree to the node’s children\r\n            <br/>\r\n            ⦁\tEntering a voxel that is non-empty and leaf: Done! Render the voxel\r\n            <br/>\r\n            ⦁\tExiting a voxel: Move up the octree one level of depth. Repeat until we’re no longer exiting the newly calculated voxel depth (i.e. we’re no longer exiting roots)\r\n            <br/><br/>            \r\n            These are continued in a loop until the ray leaves the root voxel or a leaf node is hit.\r\n            <br/><br/>\r\n\r\n            <i>NVIDIA's traversal algorithm visualized (credit: NVIDIA)</i><br/>\r\n            <Image src=\"../svo_traversal.png\" style={{width: \"40%\", maxWidth: \"500px\", paddingRight: \"19px\"}}/> \r\n            <br/>\r\n\r\n            <br/><br/>\r\n            <Card.Title>Traversal Optimization</Card.Title>\r\n            When I began flying through the SVO I noticed significant frame drops when I was inside the structure. This was because the algorithm was fully traversing down/up the SVO for nodes behind me! Leaf nodes that get rendered are only in front of the camera, so there was no sense in searching for leaf nodes we would never render anyway. To account for this, I added a check that prevents the algorithm from travelling down the octree if the node is completely behind the camera. It will only traverse down if the camera is inside the node or the node is in front of the camera. Effectively, it treats nodes behind the camera as being empty and skips over them. After adding this change the frame rate became much more consistent and I was able to explore the inside of the SVO without frame drops.\r\n            <br/><br/>\r\n\r\n            <Card.Title>Dealing With Constant Buffer Limits</Card.Title>\r\n            In DirectX 11 a constant buffer can only contain 4096 float4 vectors. If you do the math, that’s only 65,536 bytes… far less than I would need to store a 512x512x512 SVO.\r\n            <br/><br/>\r\n\r\n            <i>Rendering using a constant buffer. Purple represents empty space.</i><br/>\r\n            <Image src=\"../cbuffer_voxels.png\" style={{width: \"40%\", maxWidth: \"500px\", paddingRight: \"19px\"}}/> \r\n            <br/><br/>\r\n\r\n            A constant buffer clearly wasn’t going to cut it. My first thought was to encode the data in a texture. I began digging into the DX11 documentation to figure out how to do this when I ran into something called a Structured buffer. A Structured buffer is a buffer that holds structured data i.e an array of structs. Unlike a cbuffer it also doesn’t require you to specify a specific size in the shader. Additionally, a StructuredBuffer is required to support at least 2GB of data! This was exactly the tool I needed for the job. I added this new buffer to my pixel shader, set up the DX11 API to upload my data to the buffer, and voila! I was now able to render millions of voxels.\r\n            <br/><br/>\r\n            The switch out was extremely easy in the shader code since indexing into the structured buffer was exactly the same as indexing into the cbuffer’s array; I just needed to make sure I gave my structured buffer the same variable name.\r\n            <br/><br/>\r\n\r\n            <i>Rendering using a structured buffer (5 million+ voxels here, 134 million+ volumetrically)</i><br/>\r\n            <Image src=\"../structured_buffer_voxels.png\" style={{width: \"40%\", maxWidth: \"500px\", paddingRight: \"19px\"}}/> \r\n            <br/><br/>\r\n\r\n\r\n            <Card.Title>Demo</Card.Title>\r\n            Here is a demo of me flying through/around the SVO. (The white box is a light which renders overtop the SVO… I already fixed this but you’ll have to excuse it in this video)\r\n            <br/><br/>\r\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6iKIxKdRjRQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n            <br/><br/>\r\n\r\n            <Card.Title>What's Next?</Card.Title>\r\n            The ray-tracer is already in a great spot, being able to render millions of voxels per frame, just as I had set out to do at the beginning of this project. However, there are still plenty of additions to be made!\r\n            <br/><br/>\r\n            Going forward I plan to write an SVO terrain generation algorithm. I also plan to research the possibility of adding/removing voxels. This is going to require the SVO to be rebuilt in some cases. Thus, I’ll have to find a way to speed up the SVO rebuild.\r\n\r\n\r\n            </Card.Body>\r\n\r\n        </Card>\r\n        </Container>\r\n\r\n      <br/>\r\n    </div>\r\n  )\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useBootstrapPrefix } from './ThemeProvider';\nexport var propTypes = {\n  /**\n   * @default 'img'\n   */\n  bsPrefix: PropTypes.string,\n\n  /**\n   * Sets image as fluid image.\n   */\n  fluid: PropTypes.bool,\n\n  /**\n   * Sets image shape as rounded.\n   */\n  rounded: PropTypes.bool,\n\n  /**\n   * Sets image shape as circle.\n   */\n  roundedCircle: PropTypes.bool,\n\n  /**\n   * Sets image shape as thumbnail.\n   */\n  thumbnail: PropTypes.bool\n};\nvar defaultProps = {\n  fluid: false,\n  rounded: false,\n  roundedCircle: false,\n  thumbnail: false\n};\nvar Image = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      fluid = _ref.fluid,\n      rounded = _ref.rounded,\n      roundedCircle = _ref.roundedCircle,\n      thumbnail = _ref.thumbnail,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"fluid\", \"rounded\", \"roundedCircle\", \"thumbnail\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'img');\n  var classes = classNames(fluid && bsPrefix + \"-fluid\", rounded && \"rounded\", roundedCircle && \"rounded-circle\", thumbnail && bsPrefix + \"-thumbnail\");\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    // eslint-disable-line jsx-a11y/alt-text\n    ref: ref\n  }, props, {\n    className: classNames(className, classes)\n  }));\n});\nImage.displayName = 'Image';\nImage.defaultProps = defaultProps;\nexport default Image;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport classNames from 'classnames';\nexport default (function (className) {\n  return React.forwardRef(function (p, ref) {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, p, {\n      ref: ref,\n      className: classNames(p.className, className)\n    }));\n  });\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  variant: null\n};\nvar CardImg = React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      variant = _ref.variant,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'img' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"variant\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: classNames(variant ? prefix + \"-\" + variant : prefix, className)\n  }, props));\n});\nCardImg.displayName = 'CardImg';\nCardImg.defaultProps = defaultProps;\nexport default CardImg;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardContext from './CardContext';\nimport CardImg from './CardImg';\nvar DivStyledAsH5 = divWithClassName('h5');\nvar DivStyledAsH6 = divWithClassName('h6');\nvar CardBody = createWithBsPrefix('card-body');\nvar CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nvar CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nvar CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nvar CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nvar CardHeader = createWithBsPrefix('card-header');\nvar CardFooter = createWithBsPrefix('card-footer');\nvar CardImgOverlay = createWithBsPrefix('card-img-overlay');\nvar defaultProps = {\n  body: false\n};\nvar Card = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      bg = _ref.bg,\n      text = _ref.text,\n      border = _ref.border,\n      body = _ref.body,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"bg\", \"text\", \"border\", \"body\", \"children\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'card');\n  var cardContext = useMemo(function () {\n    return {\n      cardHeaderBsPrefix: prefix + \"-header\"\n    };\n  }, [prefix]);\n  return /*#__PURE__*/React.createElement(CardContext.Provider, {\n    value: cardContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, bg && \"bg-\" + bg, text && \"text-\" + text, border && \"border-\" + border)\n  }), body ?\n  /*#__PURE__*/\n  // @ts-ignore\n  React.createElement(CardBody, null, children) : children));\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nCard.Img = CardImg;\nCard.Title = CardTitle;\nCard.Subtitle = CardSubtitle;\nCard.Body = CardBody;\nCard.Link = CardLink;\nCard.Text = CardText;\nCard.Header = CardHeader;\nCard.Footer = CardFooter;\nCard.ImgOverlay = CardImgOverlay;\nexport default Card;"],"sourceRoot":""}