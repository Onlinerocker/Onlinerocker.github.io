(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"6xyR":function(e,t,a){"use strict";var r=a("wx14"),l=a("zLVn"),n=a("TSYQ"),o=a.n(n),i=a("q1tI"),c=a.n(i),s=a("vUet"),m=a("YdCC"),u=function(e){return c.a.forwardRef((function(t,a){return c.a.createElement("div",Object(r.a)({},t,{ref:a,className:o()(t.className,e)}))}))},d=a("Wzyw"),h=c.a.forwardRef((function(e,t){var a=e.bsPrefix,n=e.className,i=e.variant,m=e.as,u=void 0===m?"img":m,d=Object(l.a)(e,["bsPrefix","className","variant","as"]),h=Object(s.a)(a,"card-img");return c.a.createElement(u,Object(r.a)({ref:t,className:o()(i?h+"-"+i:h,n)},d))}));h.displayName="CardImg",h.defaultProps={variant:null};var f=h,b=u("h5"),p=u("h6"),E=Object(m.a)("card-body"),g=Object(m.a)("card-title",{Component:b}),w=Object(m.a)("card-subtitle",{Component:p}),y=Object(m.a)("card-link",{Component:"a"}),v=Object(m.a)("card-text",{Component:"p"}),x=Object(m.a)("card-header"),I=Object(m.a)("card-footer"),T=Object(m.a)("card-img-overlay"),k=c.a.forwardRef((function(e,t){var a=e.bsPrefix,n=e.className,m=e.bg,u=e.text,h=e.border,f=e.body,b=e.children,p=e.as,g=void 0===p?"div":p,w=Object(l.a)(e,["bsPrefix","className","bg","text","border","body","children","as"]),y=Object(s.a)(a,"card"),v=Object(i.useMemo)((function(){return{cardHeaderBsPrefix:y+"-header"}}),[y]);return c.a.createElement(d.a.Provider,{value:v},c.a.createElement(g,Object(r.a)({ref:t},w,{className:o()(n,y,m&&"bg-"+m,u&&"text-"+u,h&&"border-"+h)}),f?c.a.createElement(E,null,b):b))}));k.displayName="Card",k.defaultProps={body:!1},k.Img=f,k.Title=g,k.Subtitle=w,k.Body=E,k.Link=y,k.Text=v,k.Header=x,k.Footer=I,k.ImgOverlay=T;t.a=k},"8xcy":function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return c}));var r=a("q1tI"),l=a.n(r),n=a("RMg3"),o=a("7vrA"),i=a("6xyR");function c(){return l.a.createElement("div",null,l.a.createElement("link",{rel:"stylesheet",href:"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css",integrity:"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk",crossorigin:"anonymous"}),l.a.createElement(n.a,{items:["Blog","Resume","Projects"],links:["/","resume","projects"],projects:["Ultra Stack","Shaders","Puzzle Game","IK Demos","Spline Editor"]}),l.a.createElement(o.a,{fluid:!0},l.a.createElement("br",null),l.a.createElement(i.a,{style:{maxWidth:"1200px"}},l.a.createElement(i.a.Header,null,"5/22/2021"),l.a.createElement(i.a.Body,null,l.a.createElement(i.a.Title,null,l.a.createElement("h2",null,"Creating a Snow Post Process Effect")),l.a.createElement("br",null),l.a.createElement(i.a.Title,null,"Introduction"),"This blog will be dedicated to breaking down the technical details of the snowy weather post-process effect in my upcoming puzzle game. I implemented this within my custom engine, but it could be done in any engine that supports custom shaders and post processing.",l.a.createElement("br",null),l.a.createElement("br",null),"In my post processing system the scene is first rendered into a texture, which is then rendered onto a quad that spans the entire screen. Rendering is done using a custom fragment shader that generates the snow particles in real-time.",l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement("i",null,"For more information on how you might implement post processing in OpenGL, I recommend this article: ",l.a.createElement("a",{href:"https://learnopengl.com/Advanced-OpenGL/Framebuffers"},"LearnOpenGL - Framebuffers.")),l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement("i",null,l.a.createElement("b",null,"Note"),": You can view the source for any of the Shadertoys throughout this article by clicking their title!"),l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement(i.a.Title,null,"The Brute Force Approach"),"The brute-force approach to this effect is to calculate the location of each snow particle during every instantiation of the shader. After we have these locations we can determine if a given pixel is within a particle by calculating the distance from the pixel to the particle’s center. If the distance is less than or equal to the particle’s radius we know to draw the particle at this pixel. In order to simplify the rest of this blog, we’ll call the process of comparing a pixel’s distance to the particle’s radius as the pixel “visiting” said particle.",l.a.createElement("br",null),l.a.createElement("br",null),"One benefit of this method is we can move our particles freely without any issues. If we pass in a random texture (or use a random function), we can randomize the start location, size, and speed of each particle too. This allows us to create a very dynamic effect that feels very close to actual snow. To prevent particles from moving off-screen, we can use the modulo operator to loop them around the other side.",l.a.createElement("br",null),l.a.createElement("br",null),"Here’s a Shadertoy example I made (click the title for source):",l.a.createElement("br",null),l.a.createElement(i.a.Title,null,l.a.createElement("iframe",{width:"640",height:"360",frameborder:"0",src:"https://www.shadertoy.com/embed/NlsGRH?gui=true&t=10&paused=true&muted=false",allowfullscreen:!0})),l.a.createElement("br",null),l.a.createElement(i.a.Title,null,"Bounding with Joy"),"Unfortunately, the algorithm mentioned above suffers from performance issues when a large number of particles are present. Each pixel in our render target has to visit n particles every frame, resulting in a runtime complexity of O(n).",l.a.createElement("br",null),l.a.createElement("br",null),"What if we had a way to limit the number of particles each pixel had to visit? Notice that if we know the bounds of each particle a given pixel only has to visit the particles it’s within the bounds of. In order to accomplish this we can split the texture into an array of tiles. We’ll use these tiles to define the bounds of each particle. To split the texture into tiles we can increase the UV range from [0, 1] to [0, TILES], where TILES is the number of tiles we desire along the Y axis. This can be done by multiplying UV by TILES.",l.a.createElement("br",null),l.a.createElement("br",null),"We can then floor the scaled up UV to create a unique ID that represents the entire tile. Lastly, we’ll add 0.5 to the ID’s X and Y component, which centers the ID in the middle of the tile:",l.a.createElement("br",null),l.a.createElement(i.a.Text,{style:{fontFamily:"monospace",color:"white",background:"#333333",padding:"10px"}},"#define TILES 10.0 ",l.a.createElement("br",null),"... ",l.a.createElement("br",null),"fragColor = vec4(0); ",l.a.createElement("br",null),"vec2 uv = fragCoord.xy / iResolution.y; ",l.a.createElement("br",null),"vec2 id = floor(uv * TILES); ",l.a.createElement("br",null),"id += vec2(0.5);"),l.a.createElement("br",null),"Next, we can use the calculated ID to determine where the particle is located. This is as simple as dividing our ID by the number of tiles. We’ll also define the radius of our particle:",l.a.createElement("br",null),l.a.createElement(i.a.Text,{style:{fontFamily:"monospace",color:"white",background:"#333333",padding:"10px"}},"float rad = 0.02; ",l.a.createElement("br",null),"vec2 pos = id / TILES;"),l.a.createElement("br",null),"Now that we have the radius and position, we can determine if the given pixel should render the particle:",l.a.createElement("br",null),l.a.createElement(i.a.Text,{style:{fontFamily:"monospace",color:"white",background:"#333333",padding:"10px"}},"float dist = length(uv - pos);",l.a.createElement("br",null),"if(dist <= rad) {",l.a.createElement("br",null),"    ","float v = smoothstep(0.0, 1.0, (rad - dist) / rad);",l.a.createElement("br",null),"    ","fragColor = mix(fragColor, vec4(1), v);",l.a.createElement("br",null),"}"),l.a.createElement("br",null),"You should have a screen full of dots now… yay! Let’s add a little more action by moving the “uv” value based on the time. We’ll need to do this before calculating our ID:",l.a.createElement("br",null),l.a.createElement(i.a.Text,{style:{tabSize:"5em",fontFamily:"monospace",color:"white",background:"#333333",padding:"10px"}},"...",l.a.createElement("br",null),"uv -= vec2(iTime, -iTime)*0.2; ",l.a.createElement("br",null),"vec2 id = floor(uv * TILES); ",l.a.createElement("br",null),"... ",l.a.createElement("br",null)),l.a.createElement("br",null),"Here’s the final result: ",l.a.createElement("br",null),l.a.createElement("iframe",{width:"640",height:"360",frameborder:"0",src:"https://www.shadertoy.com/embed/slsGz8?gui=true&t=10&paused=true&muted=false",allowfullscreen:!0}),l.a.createElement("br",null),l.a.createElement("br",null),"This is great and all (if what you’re after is a couple moving dots) but it doesn’t look anything like snow. The dots need more diversity in their location and size (we’ll talk about speed later). We can accomplish two of these with a 2D random function. It’s common to see random functions utilize an unpredictable sine wave as their base. You can find many variations of these on Shadertoy, but the one I chose was from here: ",l.a.createElement("a",{href:"https://www.shadertoy.com/view/WstGDj"},"https://www.shadertoy.com/view/WstGDj"),l.a.createElement("br",null),l.a.createElement(i.a.Text,{style:{fontFamily:"monospace",color:"white",background:"#333333",padding:"10px"}},"float random (vec2 uv) {",l.a.createElement("br",null),"    ","return fract(sin(dot(uv, vec2(135., 263.))) * 103.214532);",l.a.createElement("br",null),"}"),"We’ll then call this function to offset the location of our particles. Note, we use modulo to prevent our random offset from being too large:",l.a.createElement("br",null),l.a.createElement(i.a.Text,{style:{fontFamily:"monospace",color:"white",background:"#333333",padding:"10px"}},"... ",l.a.createElement("br",null),"float rad = 0.02 * mod(random(pos), 1.0); ",l.a.createElement("br",null),"pos.x += mod(random(pos), 2.0 / TILES); ",l.a.createElement("br",null),"pos.y += mod(random(pos+vec2(4,3)), 2.0 / TILES); ",l.a.createElement("br",null),"... ",l.a.createElement("br",null)),l.a.createElement("br",null),"If you compile now you’ll notice artifacts at the edge of each tile. This is because pixels only check for one particle, the particle created at the center of the tile. As a result, any particles that get offset into a different tile get clipped. Consequently, the solution to this is to also visit the neighboring particles. We do this by repeating the previous “visit” calculation using the IDs of neighboring tiles:",l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement(i.a.Text,{style:{fontFamily:"monospace",color:"white",background:"#333333",padding:"10px"}},"for(int x=-2; x<=0; x++) {",l.a.createElement("br",null),"    ","for(int y=-2; y<=0; y++) {",l.a.createElement("br",null),"        ","float rad = 0.02;",l.a.createElement("br",null),"        ","vec2 id = curid + vec2(x,y);",l.a.createElement("br",null),"        ","vec2 pos = id / TILES;",l.a.createElement("br",null),l.a.createElement("br",null),"        ","pos.x += mod(random(pos), 0.2);",l.a.createElement("br",null),"        ","pos.y += mod(random(pos+vec2(4,3)), 0.2);",l.a.createElement("br",null),l.a.createElement("br",null),"        ","rad *= mod(random(pos), 1.0);",l.a.createElement("br",null),"        ","float dist = length(uv - pos);",l.a.createElement("br",null),l.a.createElement("br",null),"        ","if(dist <= rad) {",l.a.createElement("br",null),"            ","float v = smoothstep(0.0, 1.0, (rad - dist) / rad);",l.a.createElement("br",null),"            ","fragColor = mix(fragColor, vec4(1), v);",l.a.createElement("br",null),"        ","}",l.a.createElement("br",null),"    ","}",l.a.createElement("br",null),"}"),l.a.createElement("br",null),"We can create depth in the effect by layering multiple of these on top of one another - increasing speed and radius as the layers get closer. If we move our snow generation code into a separate function we can simply call it 3 times and composite the results. Many other additions can be integrated to make this effect more dynamic and interesting. My Shadertoy implementation (with extras included) can be found below! I encourage you to play around with the parameters and discover what looks best.",l.a.createElement("br",null),l.a.createElement("br",null),l.a.createElement("iframe",{width:"640",height:"360",frameborder:"0",src:"https://www.shadertoy.com/embed/ftsGzH?gui=true&t=10&paused=true&muted=false",allowfullscreen:!0})))),l.a.createElement("br",null))}}}]);
//# sourceMappingURL=component---src-pages-snow-effect-js-27f169b36732bad1c811.js.map